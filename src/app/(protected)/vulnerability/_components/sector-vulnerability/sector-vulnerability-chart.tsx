"use client"

import { treeMapColors } from "@/constants/chart-colors"
import { Chart } from "chart.js"
import { useEffect, useRef, useState } from "react"

export function SectorVulnerabilityChart({
	items
}: {
	items: {
		name: string
		value: string
	}[]
}) {
	const [chart, setChart] = useState<Chart | null>(null)
	const canvasRef = useRef<HTMLCanvasElement>(null)

	const treeData = items.map(({ name, value }, index) => ({
		what: name,
		value,
		label: name,
		color: () => {
			const colorIndex = index % treeMapColors.length
			return treeMapColors[colorIndex]
		}
	}))

	const config: any = {
		type: "treemap",
		data: {
			datasets: [
				{
					tree: treeData,
					key: "value",
					spacing: 1,
					backgroundColor: (ctx: any) => {
						if (ctx.type !== "data") {
							return "transparent"
						}
						const color = ctx.raw._data.color()
						return color
					},
					labels: {
						align: "left",
						display: true,
						padding: 10,
						formatter(ctx: any) {
							if (ctx.type !== "data") {
								return
							}
							return [ctx.raw._data.what, `Companies: ${ctx.raw.v}`]
						},
						font: [{ size: 14, weight: "bold" }, { size: 12 }],
						position: "top"
					}
				}
			]
		},
		options: {
			plugins: {
				title: {
					display: false
				},
				legend: {
					display: false
				},
				datalabels: {
					display: false
				},
				tooltip: {
					enabled: false,
					position: "average"
				}
			}
		}
	}

	useEffect(() => {
		const ctx = canvasRef.current?.getContext("2d") as CanvasRenderingContext2D
		const chart = new Chart(ctx, config)

		setChart(chart)

		return () => {
			chart.destroy()
		}
	}, [])

	return <canvas ref={canvasRef} className="w-full"></canvas>
}
